name: CI

on:
  push:
    paths-ignore:
      - README.md
      - LICENSE
    branches:
      - main
      - dev

  pull_request:
    paths-ignore:
      - README.md
      - LICENSE
    branches:
      - main

jobs:
  Linting:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python "3.x"
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install 'flake8'
        run: |
          python -m pip install --upgrade pip
          pip install flake8
        continue-on-error: false

      - name: Linting
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  linux-ci:
    needs: Linting
    runs-on: ubuntu-18.04
    strategy:
          matrix:
            python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies using 'apt'
        run: sudo apt install libx11-dev libxcursor-dev libpng-dev
        continue-on-error: false

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip 
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        continue-on-error: false

      - name: Testing
        run: |
          pip install -U pytest
          python setup.py install
          python -m pytest -vv
        continue-on-error: false

  macos-ci:
    needs: [Linting, linux-ci]
    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies using 'brew'
        run: brew install --cask xquartz libpng
        continue-on-error: false

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          # This path is specific to macOS
          path: ~/Library/Caches/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        continue-on-error: false

      - name: Testing
        run: |
          python setup.py install
          python -m pytest -vv
        continue-on-error: false

  
  coverage:
    needs: [Linting, linux-ci, macos-ci]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python "3.x"
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        continue-on-error: false

      - name: Generating 'coverage.xml'
        run: |
          python setup.py install
          rm -rf coverage.xml .coverage
          python -m py.test --cov-report=xml --cov=clickgen tests/
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
          verbose: true

      - uses: actions/upload-artifact@master
        if: success()
        with:
          name: coverage
          path: coverage.xml
